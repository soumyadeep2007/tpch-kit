                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3600313.90..3600314.18 rows=20 width=202)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=3600313.90..3600314.75 rows=60 width=202)
         Merge Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))))
         ->  Limit  (cost=3600313.90..3600313.95 rows=20 width=202)
               ->  Sort  (cost=3600254.30..3600850.26 rows=238386 width=202)
                     Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
                     ->  GroupAggregate  (cost=3584375.52..3593910.94 rows=238386 width=202)
                           Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                           ->  Sort  (cost=3584375.52..3584971.48 rows=238386 width=182)
                                 Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                                 ->  Hash Join  (cost=2657452.74..3563084.19 rows=238386 width=182)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Hash Join  (cost=2657450.02..3560061.13 rows=238386 width=160)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=2365890.93..3256797.96 rows=238386 width=16)
                                                   Hash Key: orders.o_custkey
                                                   ->  Hash Join  (cost=2365890.93..3252030.25 rows=238386 width=16)
                                                         Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                         ->  Bitmap Heap Scan on lineitem  (cost=2012634.86..2853942.09 rows=14705867 width=20)
                                                               Recheck Cond: (l_returnflag = 'R'::bpchar)
                                                               ->  Bitmap Index Scan on lineitem_l_orderkey_idx_l_returnflag  (cost=0.00..2008958.40 rows=14705867 width=0)
                                                         ->  Hash  (cost=332993.22..332993.22 rows=1621028 width=12)
                                                               ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=85317.27..332993.22 rows=1621028 width=12)
                                                                     ->  Bitmap Heap Scan on orders  (cost=85317.27..311379.52 rows=540343 width=12)
                                                                           Recheck Cond: ((o_orderdate >= '1993-10-01'::date) AND (o_orderdate < '1994-01-01 00:00:00'::timestamp without time zone))
                                                                           ->  Bitmap Index Scan on orders_o_orderdate_idx  (cost=0.00..85182.19 rows=540343 width=0)
                                                                                 Index Cond: ((o_orderdate >= '1993-10-01'::date) AND (o_orderdate < '1994-01-01 00:00:00'::timestamp without time zone))
                                             ->  Hash  (cost=264752.09..264752.09 rows=1500000 width=148)
                                                   ->  Seq Scan on customer  (cost=0.00..264752.09 rows=1500000 width=148)
                                       ->  Hash  (cost=2.40..2.40 rows=25 width=30)
                                             ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..2.40 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..2.07 rows=8 width=30)
 Optimizer: Postgres-based planner
(33 rows)

