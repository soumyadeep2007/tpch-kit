                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=775205.14..775205.70 rows=25 width=72) (actual time=16197.968..16197.973 rows=7 loops=1)
   Merge Key: ("substring"((customer.c_phone)::text, 1, 2))
   InitPlan 1 (returns $0)  (slice4)
     ->  Finalize Aggregate  (cost=48732.28..48732.29 rows=1 width=32) (actual time=1755.207..1755.207 rows=1 loops=1)
           ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=48732.21..48732.26 rows=3 width=32) (actual time=1736.870..1755.182 rows=3 loops=1)
                 ->  Partial Aggregate  (cost=48732.21..48732.22 rows=1 width=32) (actual time=1735.901..1735.902 rows=1 loops=1)
                       ->  Seq Scan on customer customer_1  (cost=0.00..47715.00 rows=406883 width=6) (actual time=0.386..1648.194 rows=382728 loops=1)
                             Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])))
                             Rows Removed by Filter: 1116477
   ->  GroupAggregate  (cost=775205.14..775205.37 rows=8 width=72) (actual time=16176.486..16197.442 rows=3 loops=1)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=775205.14..775205.16 rows=8 width=38) (actual time=16166.116..16171.582 rows=82147 loops=1)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               Sort Method:  quicksort  Memory: 16625kB
               Executor Memory: 12143kB  Segments: 3  Max: 5643kB (segment 1)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=720013.83..775205.01 rows=8 width=38) (actual time=12213.080..16148.345 rows=82147 loops=1)
                     Hash Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Hash Anti Join  (cost=720013.83..775204.84 rows=8 width=38) (actual time=12154.337..16129.265 rows=63889 loops=1)
                           Hash Cond: (customer.c_custkey = orders.o_custkey)
                           Extra Text: (seg2)   Initial batch 0:
 (seg2)     Wrote 329793K bytes to inner workfile.
 (seg2)     Wrote 8407K bytes to outer workfile.
 (seg2)   Initial batches 1..15:
 (seg2)     Read 329793K bytes from inner workfile: 21987K avg x 15 nonempty batches, 22126K max.
 (seg2)     Read 8407K bytes from outer workfile: 561K avg x 15 nonempty batches, 572K max.
 (seg2)   Work file set: 15 files (0 compressed), max file size 22642688, min file size 32768, compression buffer size 0 bytes
 (seg2)   Hash chain length 16.9 avg, 122 max, using 890511 of 4194304 buckets.
                           ->  Bitmap Heap Scan on customer  (cost=5628.83..44617.03 rows=246298 width=26) (actual time=54.071..282.599 rows=191505 loops=1)
                                 Recheck Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                                 ->  Bitmap Index Scan on customer_ios_test1  (cost=0.00..5567.25 rows=142200 width=0) (actual time=51.170..51.195 rows=191505 loops=1)
                                       Index Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                           ->  Hash  (cost=512236.00..512236.00 rows=15000000 width=4) (actual time=12097.239..12097.240 rows=15011435 loops=1)
                                 Buckets: 262144  Batches: 16  Memory Usage: 35105kB
                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..512236.00 rows=15000000 width=4) (actual time=0.142..9297.394 rows=15011435 loops=1)
                                       Hash Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..212236.00 rows=15000000 width=4) (actual time=0.767..7279.074 rows=15003291 loops=1)
 Optimizer: Postgres-based planner
 Planning Time: 4.863 ms
   (slice0)    Executor memory: 156K bytes.
   (slice1)    Executor memory: 4106K bytes avg x 3 workers, 5701K bytes max (seg1).  Work_mem: 5643K bytes max.
 * (slice2)    Executor memory: 42193K bytes avg x 3 workers, 42278K bytes max (seg2).  Work_mem: 35105K bytes max, 529794K bytes wanted.
   (slice3)    Executor memory: 198K bytes avg x 3 workers, 198K bytes max (seg0).
   (slice4)    Executor memory: 129K bytes.
   (slice5)    Executor memory: 196K bytes avg x 3 workers, 196K bytes max (seg0).
 Memory used:  128000kB
 Memory wanted:  1590481kB
 Execution Time: 17965.549 ms
(47 rows)

