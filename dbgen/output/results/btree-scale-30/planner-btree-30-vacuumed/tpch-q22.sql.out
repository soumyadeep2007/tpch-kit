                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=740269.54..740270.11 rows=25 width=72) (actual time=13838.713..13838.718 rows=7 loops=1)
   Merge Key: ("substring"((customer.c_phone)::text, 1, 2))
   InitPlan 1 (returns $0)  (slice4)
     ->  Finalize Aggregate  (cost=25376.45..25376.46 rows=1 width=32) (actual time=5223.764..5223.764 rows=1 loops=1)
           ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=25376.38..25376.43 rows=3 width=32) (actual time=5207.822..5223.740 rows=3 loops=1)
                 ->  Partial Aggregate  (cost=25376.38..25376.39 rows=1 width=32) (actual time=5204.800..5204.801 rows=1 loops=1)
                       ->  Index Scan using customer_ios_test1 on customer customer_1  (cost=0.18..25351.34 rows=10015 width=6) (actual time=2.327..5059.252 rows=382728 loops=1)
                             Index Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > 0.00))
   ->  GroupAggregate  (cost=740269.54..740269.77 rows=8 width=72) (actual time=13816.172..13837.714 rows=3 loops=1)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=740269.54..740269.56 rows=8 width=38) (actual time=13805.301..13811.349 rows=82147 loops=1)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               Sort Method:  quicksort  Memory: 16625kB
               Executor Memory: 12143kB  Segments: 3  Max: 5643kB (segment 1)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=718823.76..740269.41 rows=8 width=38) (actual time=9282.538..13788.531 rows=82147 loops=1)
                     Hash Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Hash Anti Join  (cost=718823.76..740269.24 rows=8 width=38) (actual time=9038.939..13771.852 rows=63889 loops=1)
                           Hash Cond: (customer.c_custkey = orders.o_custkey)
                           Extra Text: (seg2)   Initial batch 0:
 (seg2)     Wrote 329793K bytes to inner workfile.
 (seg2)     Wrote 8407K bytes to outer workfile.
 (seg2)   Initial batches 1..15:
 (seg2)     Read 329793K bytes from inner workfile: 21987K avg x 15 nonempty batches, 22126K max.
 (seg2)     Read 8407K bytes from outer workfile: 561K avg x 15 nonempty batches, 572K max.
 (seg2)   Work file set: 15 files (0 compressed), max file size 22642688, min file size 32768, compression buffer size 0 bytes
 (seg2)   Hash chain length 16.9 avg, 122 max, using 890511 of 4194304 buckets.
                           ->  Bitmap Heap Scan on customer  (cost=163.76..6921.69 rows=6062 width=26) (actual time=178.847..1413.053 rows=191505 loops=1)
                                 Recheck Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                                 Rows Removed by Index Recheck: 902177
                                 ->  Bitmap Index Scan on customer_ios_test1  (cost=0.00..162.24 rows=3500 width=0) (actual time=178.042..178.042 rows=191505 loops=1)
                                       Index Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                           ->  Hash  (cost=516511.00..516511.00 rows=15000000 width=4) (actual time=8856.013..8856.013 rows=15011435 loops=1)
                                 Buckets: 262144  Batches: 16  Memory Usage: 35105kB
                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..516511.00 rows=15000000 width=4) (actual time=0.111..6180.537 rows=15011435 loops=1)
                                       Hash Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..216511.00 rows=15000000 width=4) (actual time=0.045..4193.647 rows=15003291 loops=1)
 Optimizer: Postgres-based planner
 Planning Time: 6.249 ms
   (slice0)    Executor memory: 162K bytes.
   (slice1)    Executor memory: 4106K bytes avg x 3 workers, 5701K bytes max (seg1).  Work_mem: 5643K bytes max.
 * (slice2)    Executor memory: 269684K bytes avg x 3 workers, 269785K bytes max (seg2).  Work_mem: 35105K bytes max, 529794K bytes wanted.
   (slice3)    Executor memory: 38K bytes avg x 3 workers, 38K bytes max (seg0).
   (slice4)    Executor memory: 133K bytes.
   (slice5)    Executor memory: 83K bytes avg x 3 workers, 83K bytes max (seg0).
 Memory used:  128000kB
 Memory wanted:  1590481kB
 Execution Time: 19077.416 ms
(47 rows)

