                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=752927.48..752928.04 rows=25 width=72) (actual time=13023.541..13023.546 rows=7 loops=1)
   Merge Key: ("substring"((customer.c_phone)::text, 1, 2))
   InitPlan 1 (returns $0)  (slice4)
     ->  Finalize Aggregate  (cost=34428.70..34428.71 rows=1 width=32) (actual time=681.911..681.911 rows=1 loops=1)
           ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=34428.63..34428.68 rows=3 width=32) (actual time=678.420..681.888 rows=3 loops=1)
                 ->  Partial Aggregate  (cost=34428.63..34428.64 rows=1 width=32) (actual time=676.296..676.298 rows=1 loops=1)
                       ->  Bitmap Heap Scan on customer customer_1  (cost=14473.65..33424.08 rows=401820 width=6) (actual time=240.645..577.079 rows=382728 loops=1)
                             Recheck Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > 0.00))
                             ->  Bitmap Index Scan on customer_ios_test1  (cost=0.00..14373.19 rows=383331 width=0) (actual time=238.790..238.791 rows=382728 loops=1)
                                   Index Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > 0.00))
   ->  GroupAggregate  (cost=752927.48..752927.71 rows=8 width=72) (actual time=12995.639..13022.750 rows=3 loops=1)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=752927.48..752927.50 rows=8 width=38) (actual time=12978.313..12985.874 rows=82147 loops=1)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               Sort Method:  quicksort  Memory: 16625kB
               Executor Memory: 12143kB  Segments: 3  Max: 5643kB (segment 1)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=724163.82..752927.35 rows=8 width=38) (actual time=9519.758..12957.219 rows=82147 loops=1)
                     Hash Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Hash Anti Join  (cost=724163.82..752927.18 rows=8 width=38) (actual time=9371.473..12859.169 rows=63889 loops=1)
                           Hash Cond: (customer.c_custkey = orders.o_custkey)
                           Extra Text: (seg2)   Initial batch 0:
 (seg2)     Wrote 340870K bytes to inner workfile.
 (seg2)     Wrote 8684K bytes to outer workfile.
 (seg2)   Initial batches 1..31:
 (seg2)     Read 340870K bytes from inner workfile: 10996K avg x 31 nonempty batches, 11114K max.
 (seg2)     Read 8684K bytes from outer workfile: 281K avg x 31 nonempty batches, 288K max.
 (seg2)   Hash chain length 15.9 avg, 122 max, using 943175 of 8388608 buckets.
                           ->  Bitmap Heap Scan on customer  (cost=5550.01..18123.51 rows=243180 width=26) (actual time=193.632..509.002 rows=191505 loops=1)
                                 Recheck Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                                 ->  Bitmap Index Scan on customer_ios_test1  (cost=0.00..5489.21 rows=140400 width=0) (actual time=191.939..191.939 rows=191505 loops=1)
                                       Index Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                           ->  Hash  (cost=516479.40..516479.40 rows=14998913 width=4) (actual time=9141.238..9141.239 rows=15011435 loops=1)
                                 Buckets: 262144  Batches: 32  Memory Usage: 18549kB
                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..516479.40 rows=14998913 width=4) (actual time=0.076..6469.191 rows=15011435 loops=1)
                                       Hash Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..216501.13 rows=14998913 width=4) (actual time=0.069..4049.660 rows=15003291 loops=1)
 Optimizer: Postgres query optimizer
 Planning Time: 3.742 ms
   (slice0)    Executor memory: 203K bytes.
   (slice1)    Executor memory: 4106K bytes avg x 3 workers, 5701K bytes max (seg1).  Work_mem: 5643K bytes max.
 * (slice2)    Executor memory: 218273K bytes avg x 3 workers, 218316K bytes max (seg0).  Work_mem: 18549K bytes max, 529794K bytes wanted.
   (slice3)    Executor memory: 38K bytes avg x 3 workers, 38K bytes max (seg0).
   (slice4)    Executor memory: 172K bytes.
   (slice5)    Executor memory: 196862K bytes avg x 3 workers, 196862K bytes max (seg0).
 Memory used:  128000kB
 Memory wanted:  2120275kB
 Execution Time: 13717.380 ms
(47 rows)

