                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=748289.69..748290.25 rows=25 width=72) (actual time=15700.078..15700.083 rows=7 loops=1)
   Merge Key: ("substring"((customer.c_phone)::text, 1, 2))
   InitPlan 1 (returns $0)  (slice4)
     ->  Finalize Aggregate  (cost=34189.61..34189.62 rows=1 width=32) (actual time=448.930..448.930 rows=1 loops=1)
           ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=34189.55..34189.60 rows=3 width=32) (actual time=442.200..448.910 rows=3 loops=1)
                 ->  Partial Aggregate  (cost=34189.55..34189.56 rows=1 width=32) (actual time=441.545..441.546 rows=1 loops=1)
                       ->  Bitmap Heap Scan on customer customer_1  (cost=14645.29..33172.33 rows=406883 width=6) (actual time=89.195..363.006 rows=382728 loops=1)
                             Recheck Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > 0.00))
                             ->  Bitmap Index Scan on customer_ios_test1  (cost=0.00..14543.57 rows=388078 width=0) (actual time=86.971..86.972 rows=382728 loops=1)
                                   Index Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > 0.00))
   ->  GroupAggregate  (cost=748289.69..748289.92 rows=8 width=72) (actual time=15673.266..15699.631 rows=3 loops=1)
         Group Key: ("substring"((customer.c_phone)::text, 1, 2))
         ->  Sort  (cost=748289.69..748289.71 rows=8 width=38) (actual time=15656.201..15663.956 rows=82147 loops=1)
               Sort Key: ("substring"((customer.c_phone)::text, 1, 2))
               Sort Method:  quicksort  Memory: 16625kB
               Executor Memory: 12143kB  Segments: 3  Max: 5643kB (segment 1)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=720013.83..748289.56 rows=8 width=38) (actual time=12260.665..15636.838 rows=82147 loops=1)
                     Hash Key: ("substring"((customer.c_phone)::text, 1, 2))
                     ->  Hash Anti Join  (cost=720013.83..748289.39 rows=8 width=38) (actual time=12155.827..15608.755 rows=63889 loops=1)
                           Hash Cond: (customer.c_custkey = orders.o_custkey)
                           Extra Text: (seg2)   Initial batch 0:
 (seg2)     Wrote 340870K bytes to inner workfile.
 (seg2)     Wrote 8684K bytes to outer workfile.
 (seg2)   Initial batches 1..31:
 (seg2)     Read 340870K bytes from inner workfile: 10996K avg x 31 nonempty batches, 11114K max.
 (seg2)     Read 8684K bytes from outer workfile: 281K avg x 31 nonempty batches, 288K max.
 (seg2)   Work file set: 31 files (0 compressed), max file size 11370496, min file size 32768, compression buffer size 0 bytes
 (seg2)   Hash chain length 15.9 avg, 122 max, using 943175 of 8388608 buckets.
                           ->  Bitmap Heap Scan on customer  (cost=5628.83..17701.58 rows=246298 width=26) (actual time=40.572..248.440 rows=191505 loops=1)
                                 Recheck Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                                 ->  Bitmap Index Scan on customer_ios_test1  (cost=0.00..5567.25 rows=142200 width=0) (actual time=38.471..38.472 rows=191505 loops=1)
                                       Index Cond: (("substring"((c_phone)::text, 1, 2) = ANY ('{25,30,13,20,17,19,32}'::text[])) AND (c_acctbal > $0))
                           ->  Hash  (cost=512236.00..512236.00 rows=15000000 width=4) (actual time=12093.616..12093.617 rows=15011435 loops=1)
                                 Buckets: 262144  Batches: 32  Memory Usage: 18549kB
                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..512236.00 rows=15000000 width=4) (actual time=0.070..9415.518 rows=15011435 loops=1)
                                       Hash Key: orders.o_custkey
                                       ->  Seq Scan on orders  (cost=0.00..212236.00 rows=15000000 width=4) (actual time=0.414..7230.369 rows=15003291 loops=1)
 Optimizer: Postgres-based planner
 Planning Time: 4.578 ms
   (slice0)    Executor memory: 198K bytes.
   (slice1)    Executor memory: 4106K bytes avg x 3 workers, 5701K bytes max (seg1).  Work_mem: 5643K bytes max.
 * (slice2)    Executor memory: 24853K bytes avg x 3 workers, 24895K bytes max (seg0).  Work_mem: 18549K bytes max, 529794K bytes wanted.
   (slice3)    Executor memory: 198K bytes avg x 3 workers, 198K bytes max (seg0).
   (slice4)    Executor memory: 168K bytes.
   (slice5)    Executor memory: 2454K bytes avg x 3 workers, 2454K bytes max (seg0).
 Memory used:  128000kB
 Memory wanted:  2120275kB
 Execution Time: 16160.098 ms
(48 rows)

